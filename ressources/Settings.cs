using System;
using System.Collections.Generic;
using System.IO;
using System.Xml;

namespace Marvin_Tabelle_zu_xml
{
    class Settings
    {
        //TODO Make this class to be generated by settings
        #region private properties

        /// <summary>
        /// Start of "Favorit"-String
        /// </summary>
        private string favoritString;

        /// <summary>
        /// Divider, between data of file
        /// </summary>
        private char delimiter;

        /// <summary>
        /// File, in which output is stored
        /// </summary>
        private string outputFile;

        /// <summary>
        /// fallback default value if no value is set in table if there is no specific
        /// </summary>
        private string fallbackDefaultValue;

        /// <summary>
        /// Values to put in XML-file
        /// </summary>
        private List<string> xmlAttributes;

        /// <summary>
        /// Default Values for specific values in <see cref="xmlAttributes"/>
        /// </summary>
        // Declare the list
        private List<KeyValuePair<string, string>> defaultValues;
        #endregion

        #region public properties

        /// <summary>
        /// Getter of <see cref="delimiter"/>
        /// </summary>
        public char Delimiter { get => delimiter; }

        /// <summary>
        /// getter of <see cref="fallbackDefaultValue"/>
        /// </summary>
        public string FallbackDefaultValue { get => fallbackDefaultValue; }

        /// <summary>
        /// getter and setter of <see cref="outputFile"/>
        /// </summary>
        public string OutputFile { get => outputFile; set => outputFile = value; }

        /// <summary>
        /// getter for <see cref="defaultValues"/>-list
        /// </summary>
        public List<KeyValuePair<string, string>> DefaultValues { get => defaultValues; }

        /// <summary>
        /// getter for <see cref="favoritString"/>
        /// </summary>
        public string FavoritString { get => favoritString; }

        #endregion

        #region public methodes
        #region getter and setter for values-list
        /// <summary>
        /// getter for <see cref="xmlAttributes"/>-list
        /// </summary>
        /// <returns><see cref="xmlAttributes"/>-list</returns>
        public List<string> getXmlAttributes()
        {
            return xmlAttributes;
        }

        /// <summary>
        /// Add value to <see cref="xmlAttributes"/>-list, if nessesary
        /// </summary>
        /// <param name="value"></param>
        public void addXmlAttribute(string value)
        {
            xmlAttributes.Add(value);
        }
        #endregion

        /// <summary>
        /// Reads values from settings-file and writes them into local variables
        /// </summary>
        /// <param name="settingsFile">path to settings-file</param>
        public void readSettingsFromFile(String settingsFile)
        {
            //some console output
            Console.WriteLine($"Using settings file {settingsFile}");
            Console.WriteLine("Using following settings:");

            // Create xDoc
            XmlDocument xDoc = new XmlDocument();

            // Open file
            xDoc.Load(settingsFile);

            // Read Settings
            #region delimiter
            XmlNodeList delimiter = xDoc.GetElementsByTagName("Delimiter");
            Console.WriteLine($"Delimiter: {delimiter[0].InnerText}");
            if (!String.IsNullOrEmpty(delimiter[0].InnerText))
                this.delimiter = delimiter[0].InnerText.ToCharArray()[0];
            else
                throw new ArgumentException("No delimiter found");
            #endregion

            #region favoritString
            XmlNodeList favoritString = xDoc.GetElementsByTagName("FavoritString");
            Console.WriteLine($"FavoritString: {favoritString[0].InnerText}");
            if (!String.IsNullOrEmpty(favoritString[0].InnerText))
                this.favoritString = favoritString[0].InnerText;
            else
                throw new ArgumentException("No favorit string found");
            #endregion

            #region outputFile
            XmlNodeList outputFile = xDoc.GetElementsByTagName("OutputFile");
            Console.WriteLine($"OutputFile: {outputFile[0].InnerText}");
            if (!String.IsNullOrEmpty(outputFile[0].InnerText))
                this.outputFile = outputFile[0].InnerText;
            else
                throw new ArgumentException("No output file path found");
            #endregion

            #region fallbackDefaultValue
            XmlNodeList fallbackDefaultValue = xDoc.GetElementsByTagName("FallbackDefaultValue");
            Console.WriteLine($"FallbackDefaultValue: {fallbackDefaultValue[0].InnerText}");
            if (!String.IsNullOrEmpty(fallbackDefaultValue[0].InnerText))
                this.fallbackDefaultValue = fallbackDefaultValue[0].InnerText;
            else
                throw new ArgumentException("No fallback default value found");
            #endregion

            #region xmlAttributes
            Console.Write("XMLAttributes: ");
            XmlNodeList xmlAttributes = xDoc.GetElementsByTagName("XMLAttribute");
            this.xmlAttributes = new List<string>();
            foreach (XmlNode value in xmlAttributes)
            {
                Console.Write($"{value.InnerText}, ");
                this.xmlAttributes.Add(value.InnerText);
            }
            Console.WriteLine();
            #endregion

            #region defaultValues
            Console.Write("DefaultValues: ");
            XmlNodeList defaultValues = xDoc.GetElementsByTagName("DefaultValue");
            this.defaultValues = new List<KeyValuePair<string, string>>();
            foreach (XmlNode defaultValue in defaultValues)
            {
                Console.Write($"Name: {defaultValue.Attributes[0].InnerText}, Value: {defaultValue.InnerText}, ");
                this.defaultValues.Add(new KeyValuePair<string, string>(defaultValue.Attributes[0].InnerText, defaultValue.InnerText));
            }
            Console.WriteLine();
            #endregion
        }
        #endregion

        #region constructor
        /// <summary>
        /// default constructor, but reads Settings from settings file
        /// </summary>
        public Settings()
        {
            this.readSettingsFromFile(@"Settings.xml");
        }

        /// <summary>
        /// Constructor with path to specific settings-File
        /// </summary>
        /// <param name="settingsFile"></param>
        public Settings(string settingsFile)
        {
            this.readSettingsFromFile(settingsFile);
        }
        #endregion
    }
}
